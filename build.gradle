
// For those who want the bleeding edge
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}
apply plugin: 'forge'
apply plugin: 'java'

sourceCompatibility = version_java
targetCompatibility = version_java

def getVersionAppendage() {
    if (System.env.BUILD_NUMBER)
        return System.env.BUILD_NUMBER

    def proc = "git rev-parse --short HEAD".execute()
    proc.waitFor()
    return "DEV-" + proc.text.trim()
}

version = "${version_minecraft}-${version_mod}." + getVersionAppendage()

group= "alexndr.api" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "simplecore"

minecraft {
    version = "${version_minecraft}-${version_forge}-${version_minecraft}"
    runDir = "eclipse"
    replaceIn "APIInfo.java"
    replace "@MODVERSION@", "${project.version_mod}." + getVersionAppendage()
    
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
 }

configurations {
	extraLibs
}
dependencies {
	extraLibs 'org.jdom:jdom2:2.0.6'
	configurations.compile.extendsFrom(configurations.extraLibs)
}
jar {
	from {
		configurations.extraLibs.collect {
			 it.isDirectory() ? it : zipTree(it)
		}
	}
	{
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", "${project.version_mod}." + getVersionAppendage()
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        
        // replace version and mcversion
        expand 'version':"${project.version_mod}." + getVersionAppendage(), 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
   
}
